name: CI/CD Docker

# 트리거를 수행할 브랜치를 지정합니다.
on:
  pull_request:
    branches: [main]
    types: [closed]

# 환경설정
env:
  DOCKER_IMAGE: ghcr.io/${{ github.actor }}/github-auto-deploy
  VERSION: ${{ github.sha }}
  NAME: go_cicd

jobs:
  # 빌드 Job
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      # github repository에서 checkout
      - uses: actions/checkout@v2
      # docker build 수행
      - name: Set up docker buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      - name: Cache docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ env.VERSION }}
          restore-keys: |
            ${{ runner.os }}-buildx-11
      # GitHub 컨테이너 레지스트리에 로그인 후 빌드 & 푸시
      - name: Login to ghcr
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ env.DOCKER_IMAGE }}:latest
  # 배포 Job
  deploy:
    needs: build # build 후에 실행되도록 정의
    name: Deploy
    runs-on: [self-hosted, label-go] # AWS ./configure에서 사용할 label명
    steps:
      - name: Login to ghcr
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}
      # 3000 -> 80 포트로 수행하도록 지정
      - name: Docker run
        run: |
          docker stop redis || true
          docker rm redis || true
          docker stop ${{ env.NAME }} || true
          docker rm ${{ env.NAME }} || true
          docker rmi ${{ env.DOCKER_IMAGE }}:latest || true
          docker network create app-network || true
          docker run -d --name redis --network app-network --restart always redis:latest
          docker run -d --name go_cicd --network app-network --restart always \
            -e NODE_ENV=${{ secrets.NODE_ENV }} \
            -e PORT=${{ secrets.PORT }} \
            -e ADMIN_USER=${{ secrets.ADMIN_USER }} \
            -e ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD }} \
            -e JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }} \
            -e JWT_SECRET_KEY_ADMIN=${{ secrets.JWT_SECRET_KEY_ADMIN }} \
            -e DB_HOST=${{ secrets.DB_HOST }} \
            -e DB_PORT=${{ secrets.DB_PORT }} \
            -e DB_USERNAME=${{ secrets.DB_USERNAME }} \
            -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
            -e DB_NAME=${{ secrets.DB_NAME }} \
            -e DB_LOGGING=${{ secrets.DB_LOGGING }} \
            -e DB_SYNCHRONAIZE=${{ secrets.DB_SYNCHRONAIZE }} \
            -e TEST_DB_NAME=${{ secrets.TEST_DB_NAME }} \
            -e GOOGLE_MAIL=${{ secrets.GOOGLE_MAIL }} \
            -e GOOGLE_PASSWORD=${{ secrets.GOOGLE_PASSWORD }} \
            -e CORS_ORIGIN_LIST=${{ secrets.CORS_ORIGIN_LIST }} \
            -e AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }} \
            -e AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }} \
            -e AWS_S3_REGION=${{ secrets.AWS_S3_REGION }} \
            -e AWS_S3_BUCKET_NAME=${{ secrets.AWS_S3_BUCKET_NAME }} \
            -e AWS_S3_BUCKET_NAME_IMAGE_INPUT=${{ secrets.AWS_S3_BUCKET_NAME_IMAGE_INPUT }} \
            -e AWS_S3_BUCKET_NAME_VIDEO_INPUT=${{ secrets.AWS_S3_BUCKET_NAME_VIDEO_INPUT }} \
            -e AWS_CLOUD_FRONT_DOMAIN_IMAGE=${{ secrets.AWS_CLOUD_FRONT_DOMAIN_IMAGE }} \
            -e AWS_CLOUD_FRONT_DOMAIN_VIDEO=${{ secrets.AWS_CLOUD_FRONT_DOMAIN_VIDEO }} \
            -e PORTONE_API_KEY=${{ secrets.PORTONE_API_KEY }} \
            -e PORTONE_API_SECRET_KEY=${{ secrets.PORTONE_API_SECRET_KEY }} \
            -e REDIS_HOSTNAME=${{ secrets.REDIS_HOSTNAME }} \
            -e REDIS_PORT=${{ secrets.REDIS_PORT }} \
            -e REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }} \
            -v /etc/letsencrypt/live/msdou46-94.shop/privkey.pem:/app/certs/private.key \
            -v /etc/letsencrypt/live/msdou46-94.shop/fullchain.pem:/app/certs/certificate.pem \
            ${{ env.DOCKER_IMAGE }}:latest
