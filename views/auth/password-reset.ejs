<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC"
      crossorigin="anonymous"
    />
    <script
      src="https://code.jquery.com/jquery-3.5.1.js"
      integrity="sha256-QWo7LDvxbWT2tbbQ97B53yJnYU3WhH/C8ycbRAkjPDc="
      crossorigin="anonymous"
    ></script>
    <script
      src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"
      integrity="sha384-9/reFTGAW83EW2RDu2S0VKaIzap3H66lZH81PoYlFhbGU+6BZp6G7niu735Sk7lN"
      crossorigin="anonymous"
    ></script>
    <script src="https://unpkg.com/axios/dist/axios.min.js"></script>
    <link href="/auth/css/password-reset.css" rel="stylesheet" />
    <title>비밀번호 재설정</title>
  </head>
  <body>
    <%- include('header.ejs') %>
    <div id="password-resetBox">
      <h1>비밀번호 재설정</h1>

      <div class="mb-3">
        <label for="email" class="form-label">이메일</label>
        <input type="text" class="form-control" id="email" />
      </div>
      <div class="btn" id="add-btn">
        <button type="button" id="emailBtn" onclick="sendingEmail()">
          메일 발송
        </button>
        <div class="modal" id="modal">
          <div class="modal_body">
            <div class="password-reset">
              <h1>이메일로 인증코드를 발송하였습니다.</h1>
              <div class="mb-3 Certification-Number">
                <input
                  type="text"
                  class="form-control"
                  id="Certification-Number-input"
                  placeholder="인증번호 입력"
                />
                <button
                  type="button"
                  id="auth-confirm"
                  onclick="checkEmailAuthCode()"
                >
                  인증 확인
                </button>
              </div>
              <div class="close-btn">
                <button id="close-btn" onclick="closeModal()">나가기</button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </body>
  <script>
    // 모달 닫기
    const closeModal = () => {
      const modal = document.querySelector('#modal');
      modal.classList.remove('show');
    };

    // 이메일 입력 후 인증 메일 발송
    const sendingEmail = async () => {
      const email = document.querySelector('#email').value;

      if (!email || !email.includes('@') || !email.includes('.')) {
        alert('이메일을 정확히 입력해 주세요');
        return;
      }

      try {
        const res = await axios({
          method: 'POST',
          url: '/api/auth/reset-password',
          data: { email },
        });
        const modal = document.querySelector('#modal');
        modal.classList.add('show');
      } catch (err) {
        getErrorCode(
          err.response.data.statusCode,
          err.response.data.message,
          sendingEmail,
        );
      }
    };

    // 이메일 인증 코드 입력 후 확인
    const checkEmailAuthCode = async () => {
      const email = document.querySelector('#email').value;
      const emailAuthCode = document.querySelector(
        '#Certification-Number-input',
      ).value;

      if (!emailAuthCode) {
        alert('인증 번호를 입력해 주세요.');
        return;
      }

      try {
        const res = await axios({
          method: 'POST',
          url: '/api/auth/reset-password/email-code',
          data: { email, emailAuthCode },
        });

        alert('이메일 인증에 성공하였습니다.');
        location.href = `/auth/password/change`;
      } catch (err) {
        getErrorCode(
          err.response.data.statusCode,
          err.response.data.message,
          checkEmailAuthCode,
        );
      }
    };

    // 에러 발생 시 상태 코드에 따른 로직 실행
    const getErrorCode = async (statusCode, errorMessage, callback) => {
      if (statusCode === 400) {
        alert(`에러 코드: ${statusCode} / message: ${errorMessage}`);
        return;
      }
      if (statusCode === 401) {
        const refreshRes = await requestAccessToken();
        if (!refreshRes) {
          alert('로그인 기한이 만료되었습니다. 재로그인 부탁드립니다.');
          location.href = '/auth/login';
        }
        callback();
      }
    };

    // access 토큰이 만료되었을 시 refresh 토큰으로 access 토큰 재발급을 요청
    const requestAccessToken = async () => {
      try {
        const res = await axios({
          method: 'GET',
          url: '/api/auth/refreshtoken/user',
        });
        return true;
      } catch (err) {
        return false;
      }
    };
  </script>
</html>
